root: true
plugins:
  - import
  - jest
  - jsdoc
  - node
  - react
extends:
  - eslint:recommended
  - plugin:import/recommended
  - plugin:import/errors
  - plugin:jest/recommended
  - plugin:jsdoc/recommended
  - plugin:@typescript-eslint/eslint-recommended
env:
  es2022: true,
  node: true
parserOptions:
  ecmaFeatures:
    jsx: true
  ecmaVersion: 13
  sourceType: script
rules:
  camelcase: ["error"]
  default-case: ["error"]
  default-case-last: ["error"]
  default-param-last: ["error"]
  eqeqeq: ["error", "always", { "null": "ignore" }]
  no-empty: ["warn"]
  no-new-symbol: ["error"]
  no-var: ["error"]
  no-unused-vars: ["warn"]
  prefer-const: ["error"]
  prefer-named-capture-group: ["error"]
  radix: ["error"]
  sort-imports: ["error", { ignoreDeclarationSort: true, allowSeparatedGroups: true }]
  spaced-comment: ["error", "always"]
  # Layout & Formatting
  array-bracket-spacing: ["warn"]
  arrow-spacing: ["warn"]
  arrow-parens: ["warn", "as-needed"]
  block-spacing: ["warn"]
  brace-style: ["warn"]
  comma-dangle: ["warn", "always-multiline"]
  comma-spacing: ["warn"]
  computed-property-spacing: ["warn"]
  eol-last: ["warn", "always"]
  func-call-spacing: ["warn"]
  implicit-arrow-linebreak: ["warn"]
  indent: ["error", "tab"]
  jsx-quotes: ["warn", "prefer-double"]
  key-spacing: ["warn", { multiLine: { mode: "minimum" }}]
  keyword-spacing: ["warn"]
  linebreak-style: ["error", "unix"]
  new-parens: ["error"]
  no-mixed-spaces-and-tabs: ["error", "smart-tabs"]
  no-multi-spaces: ["warn"]
  no-multiple-empty-lines: ["warn", { max: 1, maxBOF: 1, maxEOF: 0 }]
  no-trailing-spaces: ["warn"]
  no-whitespace-before-property: ["error"]
  object-curly-spacing: ["warn", "always", { objectsInObjects: false }]
  operator-linebreak: ["error", "before"]
  padded-blocks: ["warn", "never"]
  quotes: ["warn", "single", { avoidEscape: true }]
  semi: ["warn", "never"]
  semi-spacing: ["warn"]
  semi-style: ["error", "last"]
  space-before-blocks: ["warn"]
  space-in-parens: ["warn", "never"]
  space-infix-ops: ["error", { int32Hint: true }]
  space-unary-ops: ["error"]
  switch-colon-spacing: ["warn"]
  template-curly-spacing: ["warn"]
  template-tag-spacing: ["warn"]
  # import
  "import/exports-last": ["error"]
  "import/first": ["error"]
  "import/newline-after-import": ["error"]
  "import/no-dynamic-require": ["error"]
  "import/no-unassigned-import": ["error"]
  "import/order": 
  - "warn"
  - groups: ["builtin", "external", "internal", "parent", "sibling", "index", "object"]
    newlines-between: "always"
    alphabetize:
      order: "asc"
      caseInsensitive: true
    pathGroups:
    - { "pattern": "@constants/**", group: "internal", position: "after" }
    warnOnUnassignedImports: true
  # node
  "node/no-deprecated-api": ["error"]
  "node/no-exports-assign": ["error"]
  "node/no-missing-require":
    - "error"
    - tryExtensions: [".js", ".jsx"]
  "node/no-path-concat": ["error"]
  # jsdoc
  "jsdoc/check-line-alignment": ["error", "always"]
  "jsdoc/require-param-description": 0
  "jsdoc/require-param-type": 0
  "jsdoc/require-property-description": 0
  "jsdoc/require-property-type": 0
  "jsdoc/require-returns-description": 0
  "jsdoc/require-returns-type": 0
overrides:
  # ESM
  - files: "*.mjs"
    parserOptions:
      sourceType: "module"
    settings:
      'import/resolver':
        typescript:
          extensions: [".cts", ".mts"]
  # React
  - files: "*.jsx"
    extends:
    - plugin:react/recommended
    rules:
      "react/self-closing-comp": ["error"]
    settings:
      react:
        version: detect
  # TypeScript
  - files: ["*.ts", "*.mts"]
    extends:
    - plugin:@typescript-eslint/recommended
    - plugin:@typescript-eslint/strict
    parserOptions:
      parser: "@typescript-eslint/parser"
      project: tsconfig.json
    rules:
      default-case: 0
      # import
      "import/exports-last": 0
      # jsdoc
      "jsdoc/check-tag-names": 0
      "jsdoc/require-jsdoc": 0
      # TypeScript
      "@typescript-eslint/adjacent-overload-signatures": ["error"]
      "@typescript-eslint/ban-ts-comment": ["error", { ts-ignore: false }]
      "@typescript-eslint/ban-types": ["error"]
      "@typescript-eslint/consistent-indexed-object-style": ["error"]
      "@typescript-eslint/consistent-type-definitions": ["error", "type"]
      "@typescript-eslint/no-confusing-void-expression": ["error"]
      "@typescript-eslint/no-duplicate-type-constituents": ["error"]
      "@typescript-eslint/no-empty-interface": ["warn"]
      "@typescript-eslint/no-extra-non-null-assertion": ["error"]
      "@typescript-eslint/no-extraneous-class": 0
      "@typescript-eslint/no-for-in-array": ["error"]
      "@typescript-eslint/no-import-type-side-effects": ["error"]
      "@typescript-eslint/no-inferrable-types": ["error"]
      "@typescript-eslint/no-invalid-void-type": ["error"]
      "@typescript-eslint/no-meaningless-void-operator": ["error"]
      "@typescript-eslint/no-misused-new": ["error"]
      "@typescript-eslint/no-misused-promises": ["error", { checksVoidReturn: false }]
      "@typescript-eslint/no-non-null-assertion": 0
      "@typescript-eslint/no-redundant-type-constituents": ["error"]
      "@typescript-eslint/no-require-imports": ["error"]
      "@typescript-eslint/no-this-alias": ["error"]
      "@typescript-eslint/no-unnecessary-boolean-literal-compare": ["error"]
      "@typescript-eslint/no-unnecessary-condition": ["error"]
      "@typescript-eslint/no-unsafe-enum-comparison": ["error"]
      "@typescript-eslint/no-unsafe-return": ["warn"]
      "@typescript-eslint/no-useless-empty-export": ["error"]
      "@typescript-eslint/no-var-requires": ["error"]
      "@typescript-eslint/non-nullable-type-assertion-style": ["error"]
      "@typescript-eslint/prefer-for-of": ["error"]
      "@typescript-eslint/prefer-includes": ["error"]
      "@typescript-eslint/prefer-nullish-coalescing": 0
      "@typescript-eslint/prefer-optional-chain": ["error"]
      "@typescript-eslint/prefer-readonly": ["error"]
      "@typescript-eslint/prefer-reduce-type-parameter": ["error"]
      "@typescript-eslint/prefer-regexp-exec": ["error"]
      "@typescript-eslint/prefer-string-starts-ends-with": ["error"]
      "@typescript-eslint/restrict-plus-operands": ["error"]
      "@typescript-eslint/switch-exhaustiveness-check": ["error"]
    settings:
      'import/resolver':
        typescript:
          extensions: [".js", ".mts"]